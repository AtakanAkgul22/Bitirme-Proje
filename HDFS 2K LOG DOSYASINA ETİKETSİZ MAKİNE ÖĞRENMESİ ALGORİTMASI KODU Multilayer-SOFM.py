from minisom import MiniSom
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

# Pandas ile veriyi okuyoruz.
veri = pd.read_csv("C:/Users/atkn_/Desktop/AAA/features_hdfs_labeled.csv")

# Ã–zellikleri ve etiketleri ayÄ±rÄ±yoruz.
# Etiket: Normal â†’ 0, Anomaly â†’ 1 olacak ÅŸekilde sayÄ±sal forma Ã§eviriyoruz.
ozellikler = veri.drop(columns=["label", "BlockId"], errors="ignore")
gercek_etiketler = veri["label"].map({"Normal": 0, "Anomaly": 1})

# Ã–zellikleri standartlaÅŸtÄ±rÄ±yoruz Ã§Ã¼nkÃ¼ SOFM (Self-Organizing Feature Map) mesafe temelli Ã§alÄ±ÅŸtÄ±ÄŸÄ± iÃ§in tÃ¼m Ã¶zelliklerin eÅŸit katkÄ± saÄŸlamasÄ± gerekir
olceklendirici = StandardScaler()
ozellikler_olcekli = olceklendirici.fit_transform(ozellikler)

# Ä°lk katman SOFM modelini tanÄ±mlÄ±yoruz. (GiriÅŸ: Ham Ã¶zellik vektÃ¶rÃ¼ â†’ Ã‡Ä±kÄ±ÅŸ: 2D BMU koordinatlarÄ±)
# 10x10â€™luk bir harita Ã¼zerinde MiniSom aÄŸÄ± eÄŸitiliyor
# input_len = Ã¶zellik vektÃ¶rÃ¼nÃ¼n boyutu, yani her Ã¶rnekte kaÃ§ adet EventId sayÄ±sÄ± varsa o kadar
som1 = MiniSom(x=10, y=10, input_len=ozellikler_olcekli.shape[1], sigma=1.0, learning_rate=0.5, random_seed=42)
som1.random_weights_init(ozellikler_olcekli)  # AÄŸÄ±rlÄ±klar rastgele baÅŸlatÄ±lÄ±r
som1.train_random(ozellikler_olcekli, 1000)   # EÄŸitim sÃ¼reci baÅŸlatÄ±lÄ±r

# Ä°lk SOFMâ€™in Ã§Ä±ktÄ±sÄ±: Her Ã¶rneÄŸin haritadaki BMU koordinatlarÄ±nÄ± alÄ±yoruz.
# Ã–rneÄŸin [5,3] gibi bir koordinata en yakÄ±n olduÄŸunu belirtiyor
# Daha sonra bu koordinatlar normalize edilerek ikinci katmana veriliyor.
bmu1_koordinatlari = np.array([som1.winner(x) for x in ozellikler_olcekli])   # shape: (Ã¶rnek sayÄ±sÄ±, 2)
bmu1_normalize = bmu1_koordinatlari / 10.0  # 10x10 harita olduÄŸundan 0â€“1 aralÄ±ÄŸÄ±na normalize ediliyor

# Ä°kinci katman SOFM modelini tanÄ±mlÄ±yoruz. (Ä°lk katmanÄ±n BMU koordinatlarÄ±)
# Bu katman, Ã¶rÃ¼ntÃ¼lerin harita Ã¼zerindeki konumsal yapÄ±sÄ±nÄ± Ã¶zetlemek Ã¼zere daha kÃ¼Ã§Ã¼k bir grid (5x5) kullanÄ±r.
som2 = MiniSom(x=5, y=5, input_len=2, sigma=0.5, learning_rate=0.3, random_seed=42)
som2.random_weights_init(bmu1_normalize)
som2.train_random(bmu1_normalize, 500)

# Her Ã¶rnek iÃ§in ikinci katmandaki en iyi eÅŸleÅŸen nÃ¶ronu (BMU) alÄ±yoruz.
# ArdÄ±ndan bu BMUâ€™larÄ±n kaÃ§ kez aktif olduÄŸuna dair sayÄ±m yapÄ±lÄ±r.
bmu2_koordinatlari = [tuple(som2.winner(x)) for x in bmu1_normalize]  # her biri (x,y) koordinatÄ±
bmu2_sayim = Counter(bmu2_koordinatlari)  # her nÃ¶ronun kaÃ§ kez aktif olduÄŸu
ornek_bmu2_aktivasyonlari = np.array([bmu2_sayim[bmu] for bmu in bmu2_koordinatlari])

# Aktivasyon eÅŸik deÄŸeri ile anomali tespiti kÄ±smÄ±.(SOFM-COUNT prensibi)
# En az aktif olan nÃ¶ronlara dÃ¼ÅŸen Ã¶rnekler potansiyel anomalidir.
# Ä°lk %5â€™e dÃ¼ÅŸen aktivasyonlara sahip Ã¶rnekler anomali sayÄ±lÄ±r.
esik = np.percentile(ornek_bmu2_aktivasyonlari, 5)
tahmin_edilen_etiketler = (ornek_bmu2_aktivasyonlari <= esik).astype(int)

# Model Ã§Ä±ktÄ±sÄ±nÄ± deÄŸerlendirme.
# Precision, recall, f1-score gibi metriklerle performans analizi yapÄ±lÄ±r.
print("\nğŸ”¹ Multilayer-SOFM SonuÃ§larÄ±")
print(classification_report(
    gercek_etiketler,
    tahmin_edilen_etiketler,
    target_names=["Normal", "Anomali"],
    zero_division=0
))
