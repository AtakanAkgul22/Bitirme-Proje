from minisom import MiniSom
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

# Pandas kullanarak verimizi okuyoruz.
veri = pd.read_csv("C:/Users/atkn_/Desktop/AAA/features_hdfs_labeled.csv")

# Ã–zellik (X) ve etiket (y) ayÄ±rma iÅŸlemi.
ozellikler = veri.drop(columns=["label", "BlockId"], errors="ignore")
gercek_etiketler = veri["label"].map({"Normal": 0, "Anomaly": 1})

# Ã–zellikleri normalize ediyoruz. Ã‡Ã¼nkÃ¼ SOM gibi mesafe tabanlÄ± modellerde Ã¶lÃ§eklendirme gereklidir

olceklendirici = StandardScaler()
ozellikler_olcekli = olceklendirici.fit_transform(ozellikler)

# SOFM (Self-Organizing Feature Map) modelini tanÄ±mlÄ±yoruz ve eÄŸitiyoruz.
# x, y: SOM harita boyutu (10x10)
# input_len: giriÅŸ boyutu (Ã¶zellik sayÄ±sÄ±)
# sigma: komÅŸuluk fonksiyonu geniÅŸliÄŸi
# learning_rate: Ã¶ÄŸrenme oranÄ±
# 1000 iterasyon boyunca rastgele Ã¶rneklerle eÄŸitilir
som = MiniSom(
    x=10, y=10,
    input_len=ozellikler_olcekli.shape[1],
    sigma=1.0,
    learning_rate=0.5,
    random_seed=42
)
som.random_weights_init(ozellikler_olcekli)
som.train_random(ozellikler_olcekli, 1000)

# Her Ã¶rnek iÃ§in en iyi eÅŸleÅŸen nÃ¶ronun (BMU) koordinatlarÄ±nÄ± alÄ±yoruz.
# Her veri noktasÄ±nÄ±n harita Ã¼zerinde en yakÄ±n olduÄŸu hÃ¼cre (BMU) belirlenir.
bmu_koordinatlari = [tuple(som.winner(ornek)) for ornek in ozellikler_olcekli]

# Harita Ã¼zerindeki her BMUâ€™nun kaÃ§ defa eÅŸleÅŸtiÄŸini sayÄ±yoruz.
# Bu sayÄ±mlar nÃ¶ron aktivasyonlarÄ±nÄ± temsil eder.
bmu_sayilari = Counter(bmu_koordinatlari)

# Her Ã¶rneÄŸin baÄŸlÄ± olduÄŸu BMUâ€™nun kaÃ§ defa aktif olduÄŸunu belirliyoruz.
ornek_bmu_aktivasyonlari = np.array([bmu_sayilari[bmu] for bmu in bmu_koordinatlari])

# Aktivasyon eÅŸiÄŸi belirliyoruz.
# En az kullanÄ±lan (az aktif) nÃ¶ronlara dÃ¼ÅŸen Ã¶rnekler anomali kabul edilir.
# Ä°lk %5â€™e dÃ¼ÅŸen aktivasyonlara sahip Ã¶rnekler anomali sayÄ±lÄ±r.
esik = np.percentile(ornek_bmu_aktivasyonlari, 5)

# EÅŸik altÄ±ndakiler anomali olarak etiketlenir (1), diÄŸerleri normaldir (0)
som_tahminleri = (ornek_bmu_aktivasyonlari <= esik).astype(int)

# 8. SÄ±nÄ±flandÄ±rma baÅŸarÄ± metriklerini yazdÄ±rÄ±yoruz.
print("\nğŸ”¹ SOFM-COUNT SonuÃ§larÄ±")
print(classification_report(
    gercek_etiketler,
    som_tahminleri,
    target_names=["Normal", "Anomali"],
    zero_division=0
))

